>>단축키와 사이트는 맨 아래에 정리되어 있음<<

20.02.10

★html★

vs code 설치(visual studio code)
> 깔고 나서 2가지의 부가기능 설치 / 한국어 패치, 라이브 서버(live server)

태그는 시작과 끝이 존재하며 괄호로 둘러싸여있음. 그 사이에 글자를 넣음
>>시작과 끝이 존재하지 않고 단독으로 있는 태그는 빈 태그라고 부름


**태그와 속성**
<h1></h1> : headline, 제목태그이며 h6까지 있음
<hr> : 빈 태그, 호라이즌의 약자. 수평으로 줄이 생기는 기능
<br> : 빈 태그이며, 브레이크의 약자. 줄 바꿈하는 기능
<p></p> : 단락 구분 태그. br이랑 비슷하나 다름
<b></b> : 볼드의 약자, 글씨를 굵게 만들어준다 ( = <strong></strong> )
<i></i> : 이탤릭의 약자, 글씨를 기울게 만들어준다 ( = <em></em> )
*** 볼드, 이탤릭의 태그가 왜 따로 또 있을까? 스트롱과 이엠은 강조형 의미론적 태그. 구글이 쓰기 편하게 만들어진 태그.
<h1 title = "내용"> : 타이틀 태그와 타이틀 속성은 다름! 속성으로 들어가는 타이틀은 툴팁이라고 하며, 마우스를 올렸을 때 설명같은 것이 나옴
<title></title> : 타이틀 태그. 탭의 제목에 뜨는 타이틀을 나타냄.
lorem : 텍스트

* vs code의 장점은 깃 기능이 내장되어 있음.





20.02.11

<img src="이미지링크"> : 이미지 태그

**리스트 태그**
<ul></ul> : unordered list의 약자, 순서가 없는 리스트
<ol></ol> : ordered list의 약자, 순서가 있는 리스트
<dl></dl> : define list의 약자, 정의 리스트. 무언가를 정의하고 설명하기 위한 리스트
<dt></dt> : define term / 정의할 용어
<dd></dd> : define description / 용어에 대한 설명
<li></li> : 리스트(내용)

**테이블태그+속성 설명**
<table></table>
<caption></caption> : 캡션은 테이블에 반드시 첫 번째로 삽입 (제목 개념)
<thead></thead>: table head
<tr></tr> : table row의 약자 row=행, 하나의 tr는 하나의 행이 된다(가로)
<th></th> : table headline, 강조 표시
<tbody></tbody> : table body
<td></td>: table data의 약자, 티헤드의 th과 갯수가 맞아야 함
<tfoot></tfoot> : table foot의 약자, 안에는 강조하기 위해 td가 아닌 th를 사용
<table border="n"> : border라는 속성은 외곽선을 보이게 하는 속성. n에다가 원하는 굵기의 숫자를 넣는다.
<th colspan="n"> : column span의 약자. 가로길이, 열을 하나로 늘린다. 좌우로 n만큼 합친다
<th rowsplan="n"> : row span의 약자. 세로길이, 행을 하나로 늘린다. 위아래로 n만큼 합친다 // 콜스판과 로우스판 다시 이해해보기... ....ㅡㅡㅠ
**

<a href="URL"></a> : 앵커(anchor, 닻). 일종의 책갈피 역할, URL을 넣어서 페이지 내부에서 이동을 하는 태그
<a href="URL" target="_self"></a> : target 속성. 링크에 연결된 HTML이 출력될 윈도우 창 지정. 기본 값은 "_self" 새 창으로 띄우는 건 "_blank"(=빈 공간이란 뜻)
download="" : 다운로드 속성이며, 속성 값을 다운로드함.
<h3 id="test">앵커</h3> : id 속성 지정. 
<a href=#test>앵커로 이동</a> : #id값 = 아이디 값이 표기된 곳으로 이동. 샵으로 꼭 지정 / 책갈피 기능
iframe : 유튜브로 가서 해당 영상의 공유-퍼가기 클릭하면 아이프레임값이 뜸. 긁어다가 입력하면 영상이 가져와짐.

<이론 수업> - 세 줄 요약
첫 번째. 웹과 인터넷은 다르다.
두 번째. 현재 크롬과 사파리같은 브라우저들이 대부분 차지하고 있기 때문에 그것의 맞춤 개발이 필요하다.
세 번째. 웹을 구성할 때 HTML, 다시 말하면 웹의 구조를 담당하는 HTML과 
웹 페이지에 어떤 꾸미는 것, 배치하는 것을 설정하는 CSS. 
마지막으로 웹의 동작이나 응용 프로그램 같은 것을 추가할 수 있는 자바스크립트. 이 세 가지로 현재 웹이 구성되고 있다. 





20.02.12

깃 허브 들어가서 
레퍼지토리 - settings - source에
none 값 설정되어있는 걸 master branch로 바꾸면
주소가 생성됨.
>>저장소에 올린 것을 웹 서버화. 작동된 모습을 다른 사람과 공유 가능함.


*시맨틱 태그 ( 검색 엔진이 탐색할 수 있게 만들어진 태그 / 표준 태그 )
<header> : 페이지나 섹션의 머리말
<nav> : 페이지 내의 목차
<section> : 페이지를 원하는 대로 구분
<article> : 콘텐츠를 담아줌
<aside> : 부가적인 내용
<footer> : 페이지나 섹션의 꼬리말

*태그 + 속성
<form action="" method=""></form> : 사용자의 입력을 받는 태그 (폼은 폼 요소가 있어야 작동)
<input type="속성값"></input> : 폼 요소 중의 하나 (폼 요소지만, 폼 없어도 작동함)
action 속성 : 폼 데이터를 받을 웹 페이지의 주소
get 방식 : 입력받은 데이터를 주소창을 통해 전달 (method 속성 값으로 입력)
name 속성 : 그 안에 값을 넣은 다음 전달. (ex. 해당하는 폼을 작동시키면 그 값이 주소창 뒷 부분에 네임과 밸류가 같이 표기됨.)
query 방식 : 질의. (name 속성 값) 
placeholder 속성 : 인풋 창 안에 입력되어 있는 설명 속성, 일종의 가이드역할
size 속성 : 지정한 속성값만큼 사이즈 창이 뜸.(EX:size="10", 10글자가 들어갈만한 크기의 인풋 창 생성) 최소, 최대 사이즈는 따로 지정해야줘야 함
maxlength 속성 : 최대 입력 값 제한
minlength 속성 : 최소 입력 값 제한
<textarea cols="n" rows="n"></textarea> : 텍스트 창 크기. 텍스트에어리어 태그 사이에 글자를 넣으면 창에 글자가 입력된 상태로 디폴트값.
<input type="text" list="아이디값"> : 인풋 창에 들어갈 수 있는 데이터 값 제한. (아이디값으로 속성 값 입력/데이터 리스트 연동)
<datalist id="아이디"></datalist> : 데이터 리스트 생성, 보조적으로 선택지를 주는 태그 
*콤보박스와 차이점 :  콤보박스는 선택지 안에서 택, 데이터리스트는 선택지 밖의 답을 입력해도 됨.
<option value = ""> : 빈 태그, 데이터 값 지정(데이터 리스트 태그 사이에 입력)
input type="submit" : 제출
input type="password" : 패스워드
input type="reset" : 초기화
input type="checkbox" : 체크박스( name 속성 넣어줘야 함! 그래야 주소창 변동O, 그 다음에 value는 "t" // t는 true, f는 false, *주소창 변동은 form태그 안에 넣었을 경우만. )
input type="radio" : 하나만 체크 가능한 선택지 타입 (★같은 항목의 인풋들은 네임을 같게 해야 제대로 기능을 함)
*checkbox와 radio에 checked 속성을 넣어서 기본 값 설정할 수 있음!
<select name=""></select> : 콤보박스(드롭다운), 위의 데이터리스트 태그와 비슷한 형식이며 똑같이 안에 option 태그를 입력함. but, 여기서 option은 빈 태그가 아닌 완전한 태그.
<label for="아이디값"></label><input type="타입" id="아이디값"> : 라벨링. for에 다른 태그의 아이디값를 넣어주면 그 태그와 연결.(의미론적) 
*라벨 부가설명-시각적으로 표시되는 건 아니고 데이터적으로 각자 하나의 의미를 갖고 있는 것들을 연관성 있는 것을 연결시켜주는 것.
*라벨 안에 라벨을 넣어줄 수 있음. = 이중라벨 // EX. <큰 라벨><작은 라벨1></작은 라벨1><작은 라벨2><작은 라벨2></큰 라벨>
<fieldset></fieldset> : 필드셋(네모박스 공간 형성)
<legend></legend> : 필드셋 안에 들어가는 이름표
required 속성 : 낫널과 같은 기능. 빈칸이면 작동X


*버튼 만드는 거 2가지 방식
<input type="button" value="새 버튼" onclick="alert('버튼을 누르셨네요!')"> : onclick="alert('내용')" 속성은 팝업 창 뜨는 거
<button type="button">새 버튼2</button> : 인풋 태그와 다른 점> 버튼 태그는 시작 태그와 끝 태그 사이에 밸류 값 입력

// input 속성 값은 교재 141쪽부터 참고!





20.02.13

★CSS★
=cascading style sheet

HTML의 속성은 어트리뷰트 attribute
CSS의 속성은 프로퍼티 property

>>보통 스타일 태그는 헤드 태그 안에 넣음 / 헤드에서 세팅해주는 개념이라 생각하면 됨.

*CSS방식은 세 가지 방식 有 (=스타일 방식)
-1)인라인 방식 : 선택자가 없으며 가장 강한 우선 순위를 가짐(0순위로 스타일 적용) / 단점은 태그 하나에만 적용됨 ∴ 찾기 힘들고 수정도 힘들다. >>그래서 잘 안 씀. 비추
-2)임베딩 방식 : (=내부 스타일 시트) CSS 속성이 HTML 파일 자체에 들어있는 것.
-3)링크 방식 : (=외부 스타일 시트) CSS 속성이 HTML 파일 외부에 있는 것. / 권장하는 방식
>가장 마지막에 쓰인 스타일 방식이 적용됨 (단, 인라인 방식은 상관없이 늘! 적용됨)


*선택자(selector)의 종류
-태그 선택자 : 태그이름{ }
-아이디 선택자 : 샵 붙이기 (Ex)#myid{ } // 1:1 (하나의 아이디에 한 요소, 하나의 요소에 하나의 아이디)
-클래스 선택자 : 닷 붙이기 (Ex).myclass{ } // n:m (한 요소가 여러 클래스를 넣을 수 있고 한 클래스가 여러 요소에 들어갈 수 있다)
-그룹 선택자 : 중복되는 내용 있으면 갖고와서 일괄 적용 가능. (Ex)div, span, #pId, .newClass{ }
>적용순:인라인스타일>아이디선택자>클래스선택자>태그선택자 
※만일 위의 순서를 다 무시하고 스타일을 나타내게 하고 싶다 = 프로퍼티 뒤의 밸류 뒤에 !improtant 붙이면 작동!(Ex)color : red !important ;

*태그+속성
id="" : 아이디 속성은 DB로 칠 때 유니크값, 고유번호 같은 개념.
class="" : 클래스는 여러개 지정할 수 있음 (Ex)class="class1 class2" !여러 개 쓸 때 스페이스로 구분

*색깔을 표현하는 여러가지 방법
style="color:red;" : 컬러명을 입력하는 방법
style="color:rgb(red,green,blue)" : rgb값을 입력하는 방법
style="color: #ff0000;" : hex, 16진수로 입력하는 방법 / 2글자씩 각각 r,g,b를 뜻함
>컬러에 마우스 올리면 위젯이 뜸. (=color picker)

*스타일 프로퍼티
background-image: url(이미지링크); //이미지첨부
width: 960px; // 가로 폭
height: 480px; // 세로 폭
background-repeat: repeat; // 반복 여부. 값은 repeat, no-repeat, repeat-x, repeat-y 총 4가지가 있다.
background-position: right; // 위치 설정. 값은 right, left, top, bottom, center가 있으며, 가로 세로 좌표(픽셀)로도 지정해줄 수 있음.
  EX>background-position: 200px 200px;
background-attachment: fixed; //어태치먼트, 딱 붙다 라는 뜻. fixed는 고정 - 이미지가 지정된 위치에서 따라옴
  EX>(bottom right으로 위치지정했으면 그 위치가 고정된 채로 움직임)
background : url(이미지링크) red fixed top right no-repeat; : 위의 백그라운드 설정 속성들을 한 번에 설정하는 방법. (축약)
/* background-image background-position [/background-size] repeat-style attachement box background-color */ (축약값 순서)






20.02.14

*스타일 프로퍼티 → 프로퍼티의 값(value)은 '선언부', 세미콜론(;)은 '구분자'라고 함
background-size: contain; // 배경 이미지의 크기 변경. 값은 contain, cover가 있으며 px % 등으로도 지정 가능
>contain은 짧은 면을 기준으로 사이즈 변경(이미지가 다 보이게), cover는 긴 면을 기준으로 사이즈 변경(사진 잘릴 수 있음)
>px는 길이(좌표), %는 출력되는 이미지에서 차지하는 비율(퍼센트) // EX.50% 지정해주면 이미지가 2장만 나옴(20%면 5장의 이미지 출력)
background-image: linear-gradien(to top left, 색1, 색2, 색3, 색4); // 괄호 안의 첫번째 값은 방향, 그 이후의 값부터는 출력되는 색상 값 입력.
>방향은 to ____ ____ (top, bottom, left, right 하나만 입력해도 되고 원하는 방향에 따라 조합)과 __deg(각도, 숫자를 입력)가 있음
>>linear - 선형 / circle - 원형
font-size: ___px; // 폰트 사이즈 변경, 단위는 px, %, em
font-family: "___"; // 글씨체 지정
font-style: italic; // 폰트 기울기 적용
font-weight: bold; // 폰트 굵게 적용
line-height: __; // 줄 간격, 값은 숫자나 px, % 사용
font: font-style font-weight font-size/line-height font-family// 폰트 설정을 한 번에 하기. (축약)
>단축 속성들은 스페이스로 구분, line-height는 size뒤에 슬래시 붙이고 와야함
text-align: _____; // 텍스트 정렬. 값은 right, center, left
text-decoration: _____; // 텍스트 데코레이션. 값은 underline(밑줄), overline(윗줄), line-through(가운데줄), none(없음)
a:___ { } // 선택자 뒤에 : (콜론)을 붙이고 특정 이벤트마다 적용할 스타일을 설정할 수 있다. 이를 '가상 클래스'라고 한다
>___값에 hover, active, visited가 들어갈 수 있다. 각각 마우스를 올렸을 때 ,클릭했을 때, 이미 방문했을 때 출력되는 스타일을 지정 //단, visited는 색으로만 구분 가능
※호버는 액티브 다음에 와야 함. 기본 설정이 액티브 적용 뒤에 호버가 추가 적용되는 것이기 때문
list-style-type: _____; // 리스트 태그의 타입 모양 변경. 값은 circle, square, disc, decimal(숫자순), lower-alpha(알파벳순) 등 
list-style-image: url(링크); // 리스트 태그의 모양을 이미지로 설정. 단, 크기 변경이 안되니 편집 완료된 것을 사용!!
list-style-position: _____; // 리스트의 위치, 값은 inside(들여쓰기), outside(내어쓰기)
list-style: type position img; // 리스트 스타일 설정을 한 번에 하기. (축약) EX) list-style: circle inside url(링크);
border: 1px solid gray; // 외곽선 설정. 값은 굵기, 특성, 색상순이다. 솔리드는 실선.
border-collapse: collapse; //외곽선 사이의 공간(경계?) 없애기
width: __px; height: __px; // td 선택자에다가 적용하면 그 데이터의 영역 크기 변경 가능
vertical-align: ___; //수직 정렬. 값은 top, buttom, middle (위아래로만 정렬, tr에 적용)

*크기 조정(밑의 속성들은 div에 적용한 것들)
width:__px; height:__px; // 픽셀을 기준으로 하는 절대적 크기
width:__%; height:__%; // %를 통한 크기 조정, 퍼센트 속성은 가로는 적용되지만 세로가 안될 때가 있다 > 이런 경우, 부모 요소가 아무런 길이를 갖고 있지 않은 경우.
width:__em; height:__em; // em을 통한 크기 조정, em = 폰트 크기의 배수 단위
width:__rem;, height:__rem; // em을 통한 크기 조정의 단점 보완한 rem.



>백그라운드 축약 속성
https://webdir.tistory.com/340 


*태그
<ul><li></li></ul> : <ul>를 부모태그(요소), <li>를 자식태그(요소)라고 함. 상속관계 (부모->자식) ∴ 스타일 적용 시 같이 적용됨
스타일 상속 참고 사이트 : https://poiemaweb.com/css3-inheritance-cascading





20.02.17

*스타일 프로퍼티
min-width:__; // 최소 크기, 이것보다 더 작게 안하고 싶다. 
max-width: __; // 최대 크기, 이거보다 더 크게 안하고 싶다.
>>단위는 px, 부모에 따라서 바뀌는 크기, 상대크기를 가졌을 경우에도 민하이트, 맥스하이트가 지정될 수 있다는 것
border-style: _____; // 외곽선 스타일 값(선언부): dotted(점선), dashed(좀 더 긴 점선), double(두 줄)
border-width: __px; // 외곽선 두께
border-width: 1px 2px 4px 8px; // 상-우-하-좌 외곽선 두께를 위치별로 설정 가능
border-color: ___; //외곽선 색상
border-color: __ __ __ __; // 상-우-하-좌 외곽선 색상을 위치별로 설정 가능
border-___: 축약형; // ___에는 top, bottom, left, right가 들어갈 수 있으며 외곽선의 원하는 위치 지정. 그 뒤 value(값)에는 축약형으로 입력 가능
(Ex.)border-top: 2px dashed red;
border-style: solid dotted dashed double; // 상-우-하-좌 외곽선 스타일을 위치별로 설정 가능 
border-color: ___ ___ ___; // 값을 3개만 입력할 경우, 상-좌우-하로 적용됨. (=border-color: x y x;)
*이렇게 되는 이유? x축과 y축 기반으로 생각해서 보면 됨. 그렇다면 마찬가지로 값이 2개일 경우 상하(x), 좌우(y)가 되는 셈.
border: width style color; //외곽선 축약형, ※ 다른 것은 생략해도 되나 스타일은 반드시 입력해야 함, 빠지면 축약형 선언 안 됨.
border-radius: __; // 곡률, 외곽선 모서리 둥글기 지정. 값의 단위는 px, % // 50%까지가 max. 그 이후부턴 외관 상 티가 안남
margin: __px; // 마진(여백), 단위는 px *퍼센트는 잘 안씀(비추)
margin-___: 축약형; //  ___에는 top, bottom, left, right 입력, 마진 원하는 위치 지정. 그 뒤 value에는 축약형 입력
margin: __ __ __ __; // 마진 축약형. 다른 것과 동일하게 3개, 2개 축약 버전도 입력 O
margin: auto; //자동 정렬(마진을 좌우 똑같이 주는 것), 단 위아래는 안되고 좌우만 가능
>>width를 div나 p같은 공간구분 태그에다 퍼센트(%)로 주면 브라우저에 따라 너비가 자동 조절됨
padding: __px; // 안의 콘텐츠와 외곽선 사이의 여백. __만큼 값을 주면 상하좌우 다 여백이 생성됨
padding-___: __px; // 프로퍼티의 ___에는 top, right, bottom, left 입력, 값의 __는 여백을 주고 싶은 만큼 입력.
★(콘텐츠-패딩-보더)-마진 // 이렇게 4가지가 박스 모델의 구성. 괄호 안에 든 것만 크기로 산정, 마진은 테두리 외부이기때문에 산정X
box-sizing: border-box; // 원하는 규격에 맞게 보더와 패딩을 빼고 콘텐츠를 구성하는 선언문. (border-box 사이즈가 200px이면 거기에 맞게 알아서 구성됨)

*인라인 태그들은 width, height, margin-top, margin-bottom 프로퍼티 지정 안 됨(단, 이미지 제외) / 좌우 마진은 된다.
>>인라인 태그들은 박스 모델을 지정받지 않기 때문임.
*인라인 태그는 글자(텍스트)같은 개념으로 이해. 상하 여백을 주고 싶다면 line-height로 주기.
display: inline-block; // 블록 태그를 인라인 속성을 가지도록 바꿔주는 것. 나란히 배치.(물리적 ㄴㄴ, 보여지는 영역 안에서만 배치를 인라인처럼)
display: none; // 출력을 안 하기
visibility: hidden; // 출력하되, 숨기기(콘텐츠 공간은 있는데 콘텐츠가 안보이는 것)

★position(포지션)
position: static; // 정적 위치.
position: relative;  // 상대 위치. 부모의 위치(static)가 기준(왼쪽 위)
position: absolute; // 절대 위치. 부모나 조상요소에게 상속받음, 앱솔루트를 쓸 땐 부모요소를 반드시 relative로 변환
>>앱솔루트는 스테틱을 따르지 않음. 부모가 스테틱이면 스테틱이 아닌 조상을 계속 찾아서 올라감. 바디까지 올라감.
>>static이랑 다른 점은? absolute는 인라인처럼 바뀜.(인라인 블록 속성처럼)
>>width와 height를 100%으로 지정해주어야 부모 요소랑 크기가 똑같이 지정됨
position: fixed; // 고정 위치, 아무한테도 상속받지 않음. 
float: ___; // 값에는 left, right 입력. 그림과 텍스트가 어울리도록 하는 기능. div에도 사용 가능함
>>BUT, 근처에 있는 인라인 속성의 태그들을 끌어당김.(단점)
clear: ___ // 값에는 left, right, both가 올 수 있으며 주변을 정리하는 기능.(블록 태그처럼 주변에 안 오게 함)
>>플로트를 썼을 때 주변이 끌어당겨지니 클리어를 사용해서 정리해주는 것.





20.02.18

overflow: auto; // 넘친 내용을 감싸주는 기능. 부모 요소(컨테이너 요소)를 넘친 것에 맞춰서 늘려주는 것.
>>플로트를 적용하게 되면 부모 요소가 인지하지 못해 콘텐츠가 넘치게 됨. 이럴 때 부모 요소에게 오버플로우 오토 값을 지정
overflow: ____; // 값에는 visible, hidden, scroll, auto가 올 수 있음, 넘친 내용에 대응하는 선언문
 + visible - 그냥 다 보이도록 출력
 + hidden - 넘친 걸 숨기도록 출력, 주로 이미지 크롭할 때 쓰임
 + scroll - 스크롤바가 생김(x, y축 둘 다), BUT 스크롤보단 오토를 더 자주 씀
 + auto - 높이 지정 안되었을 때 부모요소가 자동으로 늘어남, 높이 지정됐을 때는 필요할 때만 스크롤바 생성
transform: translate(x, y); // 현재의 위치를 기준으로 위치 변경하는 기능, 단위는 px, % 등..
웹폰트는 링크 복사해서 스타일시트에 넣은 다음 적용할 클래스로 이어주기.
<i></i> // 클래스와 끝 태그가 있는 i 태그는 아이콘 태그.

**오른쪽클릭 - 문서 서식 or 선택 영역 서식 누르면 들여쓰기 자동 조정됨



★부트스트랩은 html파일 참고할 것.




**단축키
ctrl+L, ctrl+O = 라이브서버
ctrl + / = 주석단축키
alt+방향키 = 현재 위치하고 있는 줄을 통째로 이동
alt+shift+방향키 = 현재 위치하고 있는 줄을 생성하며 이동
ctrl+shift+k = 현재 위치하고 있는 줄 삭제
tap = 오른쪽으로 줄 맞춤
tap + shift = 왼쪽으로 줄 맞춤
ctrl+B = 왼쪽 바 on/off
ctrl+` = 터미널 창 on/off
table>thead+tbody = 테이블에 속해있는 티헤드와 티바디 코드 생성 ( 다른 것도 만들기 가능 )



**사이트

>무료 이미지
https://pixabay.com/ko/

>vscode 단축키
https://demun.github.io/vscode-tutorial/shortcuts/

*레퍼런스 참고사이트들************************************************************
1>웹의 표준을 관리, 관련 기술 정립하는 단체(W3)가 운영하는 사이트 (영어/무료)
https://www.w3schools.com/

2>모질라 재단에서 만든 웹 표준 사이트 (한글도 나오지만 영어도 나옴/무료)
https://developer.mozilla.org/ko/

3>tcp스쿨 (한글/유료)
http://tcpschool.com/

4>오브코스 (핵심적인 내용/치트시트)
https://ofcourse.kr/

5>포에마웹 (기능 단위로 정리되어 있음)
https://poiemaweb.com/

>플랫아이콘(버튼이미지)
https://www.flaticon.com/

>컬러헌트(색조합 참고/색상값들이 hex값으로 카피되어서 GOOD!)
https://colorhunt.co/

>색 블렌드모드 참고
https://coderap.tistory.com/137

*************************************************************************************
