
******20.02.05******

*초기설정
git vesionn - 버전 확인
git config
gif config --list //리스트 확인


User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git config --global user.name "coolzosel" // 아이디생성

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git config --global user.email "guest_2@hanmail.net" // 메일생성

gif config --list //생성 후 리스트 확인


*작업 영역 명령어

User@DESKTOP-F41JSUC MINGW64 ~
$ pwd // 위치를 확인하는 명령어
/c/Users/User

User@DESKTOP-F41JSUC MINGW64 ~
$ cd C:/SIAT/Git //위치 설정해주기

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git
$ pwd 
/c/SIAT/Git

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git
$ git init // 깃을 시작하는 명령어(초기화)
Initialized empty Git repository in C:/SIAT/Git/.git/

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git status //상태를 확인하는 명령어
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track) // 나띵 투 커밋. 뭔가 장치할 게 없어, 이야기 할 게 없어 란 명령어. (비어있는 상태)

(해당 폴더에 텍스트문서를 만들고 상태확인하면 빨간글씨로 변화가 있다는 것을 알려줌)
(폴더만들고 나서 명령어 입력)

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        start.txt //빨간색으로 표시됨

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git add start.txt // 작업 영역을 스테이지 영역으로 올려줌

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   start.txt //초록색으로 표시됨 작업 영역에서 스테이지 영역으로 넘어왔다는 표시

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git commit -m "add start.txt" // 저장 영역으로 넘어오는 명령어 (저장) / -m "add 파일명.확장자명" (메시지 저장) 
[master (root-commit) ade4dcb] add start.txt
 1 file changed, 1 insertion(+)
 create mode 100644 start.txt

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git log //기록 보는 명령어
commit ade4dcb59fb99ea5fc9ded113a9851050a6909fd (HEAD -> master)
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 11:40:02 2020 +0900

    add start.txt

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git status // 다시 상태 확인 (워킹트리는 작업 영역을 의미함), 작업내용을 저장영역까지 옮긴 뒤 깨끗한지 확인 작업해주는 것.
On branch master
nothing to commit, working tree clean


*브랜치

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git branch
* master
  test

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git checkout test //테스트라는 브랜치로 이동
Switched to branch 'test'

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git branch
  master
* test

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git status
On branch test
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   start.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        test2.txt
        "\354\235\264\354\240\225\355\231\224.txt.txt"

no changes added to commit (use "git add" and/or "git commit -a")

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git add .

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git status
On branch test
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   start.txt
        new file:   test2.txt
        new file:   "\354\235\264\354\240\225\355\231\224.txt.txt"


User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git commit -m "add test2.txt"
[test c6f011c] add test2.txt
 3 files changed, 54 insertions(+), 1 deletion(-)
 create mode 100644 test2.txt
 create mode 100644 "\354\235\264\354\240\225\355\231\224.txt.txt"

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git checkout master
Switched to branch 'master'

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git branch
* master
  test

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git branch -v
* master 35a1ce2 add test.txt
  test   c6f011c add test2.txt // 여기서 커밋값이 달라진 걸 볼 수 있음.

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (test)
$ git log
commit c6f011c874a0976407b47c22176ef5a32806c8b8 (HEAD -> test)
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 14:18:26 2020 +0900

    add test2.txt

commit 35a1ce25f28b8e56a289d0fecc827b22d45bf3e7 (master)
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 12:00:06 2020 +0900

    add test.txt

commit ade4dcb59fb99ea5fc9ded113a9851050a6909fd
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 11:40:02 2020 +0900

    add start.txt

**여기서 Head는 현재 브랜치를 의미함. // 각 브랜치는 특정(최종)커밋을 나타냄

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git branch
* master
  test

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git merge test // 브랜치 병합 ( 마스터가 기준이 되어야하기때문에 현재 브랜치는 꼭 마스터로)  
Updating 35a1ce2..c6f011c
Fast-forward
 start.txt                                      |  3 +-
 test2.txt                                      |  1 +
 "\354\235\264\354\240\225\355\231\224.txt.txt" | 51 ++++++++++++++++++++++++++
 3 files changed, 54 insertions(+), 1 deletion(-)
 create mode 100644 test2.txt
 create mode 100644 "\354\235\264\354\240\225\355\231\224.txt.txt"

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git branch -v
* master c6f011c add test2.txt
  test   c6f011c add test2.txt

User@DESKTOP-F41JSUC MINGW64 /c/SIAT/Git (master)
$ git log
commit c6f011c874a0976407b47c22176ef5a32806c8b8 (HEAD -> master, test)
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 14:18:26 2020 +0900

    add test2.txt

commit 35a1ce25f28b8e56a289d0fecc827b22d45bf3e7
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 12:00:06 2020 +0900

    add test.txt

commit ade4dcb59fb99ea5fc9ded113a9851050a6909fd
Author: coolzosel <guest_2@hanmail.net>
Date:   Wed Feb 5 11:40:02 2020 +0900

    add start.txt


******여기까지가 브랜치 병합, BUT 이게 옳은 병합은 아님. 기존 마스터값과 병합한 브랜치(마스터+테스트)의 값이 똑같아지기때문에
기존 마스터값으로 돌아갈 수 없음, 그렇기 때문에 마스터와 테스트가 다르다.라고 하는 내용을 입력해줌으로써 마스터의 고유값을 기록하고 그 다음 병합!

기존 마스터값으로 돌아가려면 깃 로그해서 제일 마지막에 있는 커밋값으로
git reset --hard (커밋값7글자)를 쳐주면 돌아간다.



Git의 영역

작업 > 스테이지 > (지역)저장소 > (원격)저장소=깃허브

*원격저장소(깃허브) 추가하는 명령어
git remote add origin "깃허브 HTTPS"

git push -u origin master // -u:업스트림의 줄임말




******20.02.06******

reset과 비슷한, 원격 저장영역을 로컬 영역으로 되돌릴 수 있는 명령어
git fetch // 원격저장소에서부터 가져와 작업영역으로 되돌림.
git pull // 원격저장소로부터 폴더와 파일을 그대로 작업영역으로.(fetch+merge) 펫치의 번거로움을 보완하고, 머지까지 한 번에 다 해주는 명령어


git ignore // 깃에서는 설정하는 파일,  gitignore라고 하는 파일 . 이 파일 내부에 어떤 확장자명이나 폴더는 원격 저장소로 업로드를 하지 말아주세요, 라고 하는 설정이 담겨 있는 파일
*만약 설정해놓은 파일을 이미 커밋해서 깃 허브에 있다면 이그노어에 대한 설정은 적용되지 않음. 그렇기 때문에 처음에 이닛(초기화)하자마자 이그노어 파일 생성을 해줘야 제대로 작동함

>>소스트리:깃 배쉬와 같은 기능을 하는 또 다른 프로그램(깃 배쉬보다 시각화가 잘 되어있고 보기 편하다)

원격저장소에 있는 걸 로컬저장소로 가져오기=클론(Clone)
깃 배쉬에서는 git clone "URL주소" 라고 명령어 사용해서 가져올 수 있음!
*소스트리를 이용할 땐, 새로 로컬에 지정할 폴더가 빈 폴더여야만 함. 그렇지않으면 로컬에 지정되지 않음.
소스트리에선 init을 해주지 않아도 폴더에 가면 .git이란 폴더가 생성되어있음(알아서 초기화)


소스트리에서.. 
로컬저장소에서 원격저장소를 가기 전, 푸쉬 알림이 한 개든 두 개든.. 여러 개가 되어도 푸쉬를 안해도 상관없음.
하지만 푸쉬해야한다면 신중히 검토하고 최종적으로 올릴 것만! 푸쉬하기. 
이전 버전에서 푸쉬하려고 하면 원격저장소의 최종버전과 다르기 때문에 푸쉬가 불가능.(오류뜸)
= 여기서 알 수 있는 것. 원격저장소는 최종버전만 업데이트가 됨, 로컬과 원격의 버전이 같아야함 / 푸쉬할 때 신중해야한다
>>이전버전으로 갔다가 버전 맞춰주려고 Pull하면은 충돌 오류 발생함. (내용충돌)
=이럴 때는 두 버전 중 어떤 내용을 병합할 지 취사 선택을 해야 충돌 해결(데이터 값이 겹치지 않게)

**소스트리에서 뜬 conflict(충돌)/컨플릭트

start1
<<<<<<< HEAD //(내가 "현재" 작업하고 있는 브랜치 = 마스터)
start3
=======
start2 //(원격저장소가 갖고 있는 데이터값)
>>>>>>> 618f19837f2313dcb67f3874aa41bb14597a9772 // 커밋값(아이디값)

= 폴더로 가서 충돌을 제거해준다(데이터 값 정리, 데이터값의 중복제거or완전삭제or다 포함) 그리고 반드시 커밋!!
= 충돌 제거 후 커밋할 때 커밋 메시지가 자동적으로 입력되어있음 이 때 누가 커밋했는지 볼 수 있음(충돌 해결한 사람)


*깃 플로우 ( 병합과 삭제를 쉽게 할 수 있는 기능 = 기능 마무리를 하면서 필요 없는 브랜치는 병합을 한 다음에 삭제까지 자동으로 마무리해 주는 기능 )
-제품 브랜치 : 최종적으로 서비스가 이뤄지는 브랜치를 말함
-개발 브랜치 : 개발하고자 하는 브랜치.
-피쳐/기능 : 특징이라는 의미, 각 개발하는 팀 혹은 개인이 기능 단위로 개발이 진행되는 브랜치에 사용 (주로 많이 사용)
-릴리즈 : 무언가 배포를 하겠다. 서비스를 진행하기 좋겠다라고 생각되는 브랜치
-핫픽스 : 버그와 같은 오류가 생길 때, 오류를 해결하기 위해 사용되는 개발 브랜치의 한 종류

깃플로우 생성 후, 다시 한 번 버튼 누르면 시작할 수 있다.
기능을 시작하고 완료되면(커밋까지 끝낸 상태) 깃플로우로 다시 가서 기능 마무리. // 자연스럽게 개발 브랜치로 알아서 병합해줌.

>>개발 브랜치를 깃플로우(기능 시작)해서 작업 = 기능별로 작업별로 나눠서 작업
>>깃플로우가 완료되면 그 뒤에 마스터 브랜치에 합쳐주는 것임.(마스터가 최종물, 중심이니까)


내가 여러 가지의 브랜치를 만들 때 실수한 것 = 개발 브랜치에 안 합치고 마스터브랜치에 병합한 것,(깃플로우 계속 쓴 거)
**여러가지를 만들때 브랜치 만들고, 브랜치 만들고 개발브랜치에 병합해주는 것임. 마스터브랜치는 최종병합이기때문에 기능 브랜치 완료 후 바로 마스터로 병합 X
기능브랜치1 커밋 후>개발브랜치
기능브랜치2 커밋 후>개발브랜치
개발브랜치 커밋 후>마스터브랜치
이렇게
=기능별 작업별 브랜치 다 끝내고 최종적으로 마스터에 합치는 것.